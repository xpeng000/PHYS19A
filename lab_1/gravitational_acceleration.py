#author: Rachel Peng #programming description: python code for PHYS19a lab 1, analyzing gravitational acceleration g, along with its stats.  #formula for graitational acceleration g = 2L/t^2import numpy as npimport matplotlib.pyplot as plt#L value and its errorlength = 1.708error = 0.001 #experiment time measurements in an arraytime_data = np.array([0.600, 0.587, 0.615, 0.670, 0.666, 0.614, 0.631, 0.619, 0.607, 0.605,                      0.610, 0.601, 0.663, 0.649, 0.644, 0.618, 0.615, 0.617, 0.622, 0.589,                       0.667, 0.610, 0.641, 0.614, 0.610, 0.610, 0.619, 0.614, 0.611, 0.612,                       0.617, 0.613, 0.612, 0.614, 0.610, 0.617, 0.614, 0.605, 0.609, 0.609,                       0.610, 0.614, 0.513, 0.612, 0.616, 0.611, 0.608, 0.612, 0.611, 0.606,                      0.606, 0.608, 0.610, 0.622, 0.642, 0.609, 0.609, 0.599, 0.621, 0.619,                      0.604, 0.609, 0.602, 0.607, 0.613, 0.608, 0.620, 0.608, 0.614, 0.587,                       0.590, 0.603, 0.604])print()print(time_data)print()#find the mean mu = np.sum(time_data)/len(time_data)print("Mean %.2f"%(mu))print()#find the variance diff_sum_sq = np.sum((time_data-mu)**2)variance = diff_sum_sq/(len(time_data)-1)print("Variance %.5f"%(variance))#find the standard deviationstd = variance**0.5print("Standard Deviation %.3f"%(std))print()#find the error on meanmean_err = std/(len(time_data)**0.5)print("Error on mean %.4f"%(mean_err))print()#show mean and its errorprint("mean estimation with error %.2f +/- %.4f" %(mu, mean_err))print()#find the error propagation sigma_t = 0.0024sigma_l = 0.001time = 0.610length = 1.708error_p = (16*length*(mu**-6)*(sigma_t**2)+4*(mu**-4)*(sigma_l**2))**0.5print("Error propagation %.3f"%(error_p))plt.plot()#make histogram nbins = 10n, bins, patches = plt.hist(time_data, nbins, range = (0.530, 0.730), ec="black")plt.title("Number of measurements = "+ str(len(time_data))+", mean =  %.2f"%(mu)+          ", standard deviation = %.3f"%(std)+", error on mean = %.4f"%(mean_err))plt.xlabel("Time (s)")plt.ylabel("Measurement frequency")plt.show()#sort datasorted_time_data = np.sort(time_data)#add labels for the histogram plt.xlabel("Time (seconds)")plt.ylabel("Frequency")plt.title("Histogram of the free fall time, ")                            