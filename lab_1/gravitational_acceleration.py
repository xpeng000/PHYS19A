#author: Rachel Peng #programming description: python code for PHYS19a lab 1, analyzing gravitational acceleration g, along with its stats.  #gformula for graitational acceleration g = 2L/t^2import numpy as npimport matplotlib.pyplot as plt#L value and its errorlength = 1.708error = 0.001 #experiment time measurements in an arraytime_data = np.array([1, 2, 3, 4])#find the mean mu = np.sum(time_data)/len(time_data)print("Mean = {}".format(mu))#find the variance diff_sum_sq = np.sum((time_data-mu)**2)variance = diff_sum_sq/(len(time_data)-1)print("Variance = {}".format(variance))#find the standard deviationstd = variance**0.5print("Standard Deviation = {}".format(std))#find the error on meanmean_err = std/(len(time_data)**0.5)print("Error on mean = {}".format(mean_err))#find the error propagation sigma_t = 0.0001sigma_l = 0.0001error_p = (16*(mu**-6)*(sigma_t**2)+4*(mu**-4)*(sigma_l**2))**0.5print("Error propagation = {}".format(error_p))plt.plot()#make histogram nbins = 8n, bins, patches = plt.hist(time_data, nbins, ec="black")#sort datasorted_time_data = np.sort(time_data)#add labels for the histogram plt.xlabel("Time (seconds)")plt.ylabel("Frequency")plt.title("Histogram of the free fall time, ")